generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdItineraries Itinerary[]     @relation("CreatedBy")
  groupMemberships   GroupMember[]
  activities         Activity[]      @relation("ActivityCreator")
  suggestions        Suggestion[]    @relation("SuggestionCreator")
  votes              Vote[]
  comments           Comment[]
  wishlistItems      WishlistItem[]
  userActivities     UserActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Itinerary {
  id          String   @id @default(cuid())
  title       String
  description String?
  destination String
  startDate   DateTime
  endDate     DateTime
  createdBy   String
  
  creator        User            @relation("CreatedBy", fields: [createdBy], references: [id])
  members        GroupMember[]
  days           Day[]
  accommodations Accommodation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accommodation {
  id          String   @id @default(cuid())
  itineraryId String
  name        String
  location    String
  checkIn     DateTime
  checkOut    DateTime
  nights      Int
  guests      Int      @default(1)
  cost        Float?
  notes       String?
  bookingRef  String?
  photoUrl    String?
  
  itinerary Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id          String @id @default(cuid())
  itineraryId String
  userId      String
  role        String @default("member") // "admin" or "member"
  
  itinerary Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  joinedAt DateTime @default(now())
  
  @@unique([itineraryId, userId])
}

model Day {
  id          String @id @default(cuid())
  itineraryId String
  date        DateTime
  dayIndex    Int @default(0)     // 0-based index (Day 1 = 0, Day 2 = 1, etc.)
  
  itinerary  Itinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  activities Activity[]
  
  @@unique([itineraryId, dayIndex])
}

model Activity {
  id                      String    @id @default(cuid())
  dayId                   String
  dayIndex                Int @default(0)       // Redundant field for easier queries and date independence
  title                   String
  description             String?
  location                String?
  locationPlaceId         String?   // Google Places ID
  locationLat             Float?    // Latitude
  locationLng             Float?    // Longitude
  placePhotoReference     String?   // Cached photo reference from Google Places
  startTime               String?
  duration                Int?      // Duration in minutes
  cost                    Float?
  isGroupActivity         Boolean   @default(true)
  createdBy               String
  
  day         Day          @relation(fields: [dayId], references: [id], onDelete: Cascade)
  creator     User         @relation("ActivityCreator", fields: [createdBy], references: [id])
  suggestions Suggestion[]
  votes       Vote[]       @relation("ActivityVotes")
  comments    Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Suggestion {
  id            String  @id @default(cuid())
  activityId    String
  title         String
  description   String?
  location      String?
  estimatedCost Float?
  suggestedBy   String
  
  activity  Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  suggester User     @relation("SuggestionCreator", fields: [suggestedBy], references: [id])
  votes     Vote[]   @relation("SuggestionVotes")
  
  createdAt DateTime @default(now())
}

model Vote {
  id           String  @id @default(cuid())
  userId       String
  suggestionId String?
  activityId   String?
  type         String  // "up" or "down"
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestion Suggestion? @relation("SuggestionVotes", fields: [suggestionId], references: [id], onDelete: Cascade)
  activity   Activity?   @relation("ActivityVotes", fields: [activityId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, suggestionId])
  @@unique([userId, activityId])
}

model Comment {
  id         String  @id @default(cuid())
  activityId String
  userId     String
  content    String
  
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id          String @id @default(cuid())
  userId      String
  placeId     String  // Google Places ID
  placeName   String
  placeVicinity String?
  placeRating Float?
  placePhotoReference String?
  itineraryId String  // Associated with which itinerary this was found
  
  // Location coordinates
  locationLat Float?   // Latitude
  locationLng Float?   // Longitude
  
  // GPT suggestion fields
  gptTimeframe String? // Suggested timeframe: morning, afternoon, evening, night, anytime
  gptDuration  Int?    // Suggested duration in minutes
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, placeId, itineraryId])
}

model UserActivity {
  id            String @id @default(cuid())
  userId        String
  itineraryId   String
  sessionId     String    // Unique identifier for the explore session
  placeId       String    // Google Places ID
  placeName     String
  placeIndex    Int       // Position in the suggestion list (0-based)
  
  // Time tracking
  viewStartTime DateTime  // When user first saw this place
  viewEndTime   DateTime? // When user moved away from this place
  totalViewTime Int?      // Total milliseconds spent viewing (calculated)
  
  // Interaction tracking
  imageSlides   Int @default(0) // Number of images they scrolled through
  addedToWishlist Boolean @default(false) // Did they add it to wishlist
  timeToWishlist Int? // Milliseconds from viewStart to wishlist add (if applicable)
  
  // Context
  dayId         String? // Which day they were exploring for
  
  // GPT source tracking
  isGptSuggestion Boolean @default(false) // Whether this place came from GPT suggestions
  gptCategory     String? // Category of the GPT suggestion (e.g., "restaurant", "attraction", etc.)
  searchSource    String? // Source of the place ("gpt", "nearby_search", "text_search")
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, sessionId])
  @@index([placeId])
}