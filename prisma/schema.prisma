generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdItineraries Itinerary[]     @relation("CreatedBy")
  groupMemberships   GroupMember[]
  activities         Activity[]      @relation("ActivityCreator")
  suggestions        Suggestion[]    @relation("SuggestionCreator")
  votes              Vote[]
  comments           Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Itinerary {
  id          String   @id @default(cuid())
  title       String
  description String?
  destination String
  startDate   DateTime
  endDate     DateTime
  createdBy   String
  
  creator User            @relation("CreatedBy", fields: [createdBy], references: [id])
  members GroupMember[]
  days    Day[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id          String @id @default(cuid())
  itineraryId String
  userId      String
  role        String @default("member") // "admin" or "member"
  
  itinerary Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  joinedAt DateTime @default(now())
  
  @@unique([itineraryId, userId])
}

model Day {
  id          String @id @default(cuid())
  itineraryId String
  date        DateTime
  
  itinerary  Itinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  activities Activity[]
}

model Activity {
  id              String    @id @default(cuid())
  dayId           String
  title           String
  description     String?
  location        String?
  locationPlaceId String?   // Google Places ID
  locationLat     Float?    // Latitude
  locationLng     Float?    // Longitude
  startTime       String?
  duration        Int?      // Duration in minutes
  cost            Float?
  isGroupActivity Boolean   @default(true)
  createdBy       String
  
  day         Day          @relation(fields: [dayId], references: [id], onDelete: Cascade)
  creator     User         @relation("ActivityCreator", fields: [createdBy], references: [id])
  suggestions Suggestion[]
  votes       Vote[]       @relation("ActivityVotes")
  comments    Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Suggestion {
  id            String  @id @default(cuid())
  activityId    String
  title         String
  description   String?
  location      String?
  estimatedCost Float?
  suggestedBy   String
  
  activity  Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  suggester User     @relation("SuggestionCreator", fields: [suggestedBy], references: [id])
  votes     Vote[]   @relation("SuggestionVotes")
  
  createdAt DateTime @default(now())
}

model Vote {
  id           String  @id @default(cuid())
  userId       String
  suggestionId String?
  activityId   String?
  type         String  // "up" or "down"
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestion Suggestion? @relation("SuggestionVotes", fields: [suggestionId], references: [id], onDelete: Cascade)
  activity   Activity?   @relation("ActivityVotes", fields: [activityId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, suggestionId])
  @@unique([userId, activityId])
}

model Comment {
  id         String  @id @default(cuid())
  activityId String
  userId     String
  content    String
  
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}