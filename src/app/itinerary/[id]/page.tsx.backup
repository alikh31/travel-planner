'use client'

import { useState, useEffect, useMemo, useCallback, memo } from 'react'
import { useSession } from 'next-auth/react'
import { useParams, useRouter } from 'next/navigation'
import { ArrowLeft, Plus, Users, Calendar, MapPin, ThumbsUp, ThumbsDown, MessageSquare, UserPlus, X, Crown, Settings, RefreshCw, Edit3, Trash2, MoreHorizontal, Hotel, AlertCircle, AlertTriangle, Map } from 'lucide-react'
import Link from 'next/link'
import { format } from 'date-fns'
import LocationSearch from '@/components/LocationSearch'
import TimeGap from '@/components/TimeGap'
import AccommodationPlanner from '@/components/AccommodationPlanner'
import ActivitiesMap from '@/components/ActivitiesMap'

// Helper function to calculate end time from start time and duration
const getEndTime = (startTime?: string, duration?: number): string | undefined => {
  if (!startTime || !duration) return undefined
  
  const start = new Date(`2000-01-01T${startTime}`)
  const end = new Date(start.getTime() + duration * 60 * 1000)
  
  return end.toTimeString().slice(0, 5) // HH:MM format
}

// Helper function to format duration for display
const formatDuration = (duration?: number): string => {
  if (!duration) return ''
  
  const hours = Math.floor(duration / 60)
  const minutes = duration % 60
  
  if (hours > 0 && minutes > 0) {
    return ` (${hours}h ${minutes}m)`
  } else if (hours > 0) {
    return ` (${hours}h)`
  } else {
    return ` (${minutes}m)`
  }
}

interface Activity {
  id: string
  title: string
  description?: string
  location?: string
  locationPlaceId?: string
  locationLat?: number
  locationLng?: number
  startTime?: string
  duration?: number
  cost?: number
  isGroupActivity: boolean
  suggestions: Suggestion[]
  votes: Vote[]
  comments: Comment[]
  createdBy: string
  createdAt: string
  updatedAt: string
}

interface Suggestion {
  id: string
  title: string
  description?: string
  location?: string
  estimatedCost?: number
  suggestedBy: string
  votes: Vote[]
  createdAt: string
}

interface Vote {
  id: string
  userId: string
  type: 'up' | 'down'
  createdAt: string
}

interface Comment {
  id: string
  content: string
  userId: string
  user: {
    id: string
    name: string
    image?: string
  }
  createdAt: string
}

interface Day {
  id: string
  date: string
  activities: Activity[]
}

interface Itinerary {
  id: string
  title: string
  description?: string
  destination: string
  startDate: string
  endDate: string
  createdBy: string
  days: Day[]
  members: Array<{
    user: {
      id: string
      name: string
      email: string
      image?: string
    }
    role: string
  }>
}

// Memoized Activity Component to prevent unnecessary re-renders
const ActivityItem = memo(({ 
  activity, 
  session, 
  onVote, 
  onToggleComments, 
  onAddComment, 
  onEditActivity,
  onDeleteActivity,
  showComments, 
  newComment, 
  setNewComment, 
  isSubmittingComment,
  isAdmin
}: {
  activity: Activity
  session: any
  onVote: (activityId: string, type: 'up' | 'down') => void
  onToggleComments: (activityId: string) => void
  onAddComment: (activityId: string) => void
  onEditActivity: (activity: Activity) => void
  onDeleteActivity: (activityId: string) => void
  showComments: string | null
  newComment: string
  setNewComment: (value: string) => void
  isSubmittingComment: boolean
  isAdmin: boolean
}) => {
  const getUserVote = useCallback((activity: Activity, userId: string) => {
    return activity.votes.find(vote => vote.userId === userId)
  }, [])

  const getVoteCount = useCallback((activity: Activity, type: 'up' | 'down') => {
    return activity.votes.filter(vote => vote.type === type).length
  }, [])

  return (
    <div className="border border-gray-200 rounded-lg p-4">
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <h4 className="font-medium text-gray-900">{activity.title}</h4>
          {activity.description && (
            <p className="text-sm text-gray-600 mt-1">{activity.description}</p>
          )}
          {activity.location && (
            <div className="mt-2">
              <button
                onClick={() => {
                  const encodedLocation = encodeURIComponent(activity.location!)
                  window.open(`https://www.google.com/maps/search/?api=1&query=${encodedLocation}`, '_blank')
                }}
                className="flex items-center text-sm text-blue-600 hover:text-blue-800 hover:underline mb-1"
              >
                <MapPin className="h-4 w-4 mr-1 flex-shrink-0" />
                <span className="truncate">{activity.location}</span>
              </button>
            </div>
          )}
          {(activity.startTime || activity.duration) && (
            <div className="flex items-center text-sm text-gray-500 mt-1">
              <Calendar className="h-4 w-4 mr-1" />
              {activity.startTime && (
                <>
                  {format(new Date(`2000-01-01T${activity.startTime}`), 'h:mm a')}
                  {activity.duration && getEndTime(activity.startTime, activity.duration) && (
                    <> - {format(new Date(`2000-01-01T${getEndTime(activity.startTime, activity.duration)}`), 'h:mm a')}</>
                  )}
                  {formatDuration(activity.duration)}
                </>
              )}
            </div>
          )}
          {activity.cost && (
            <div className="text-sm text-gray-500 mt-1">
              Cost: ${activity.cost}
            </div>
          )}
        </div>
        <div className="flex items-center space-x-2">
          <button 
            onClick={() => onVote(activity.id, 'up')}
            className={`flex items-center transition-colors ${
              getUserVote(activity, session?.user?.id || '')?.type === 'up'
                ? 'text-green-600'
                : 'text-gray-400 hover:text-green-600'
            }`}
          >
            <ThumbsUp className="h-4 w-4" />
            <span className="text-xs ml-1">
              {getVoteCount(activity, 'up')}
            </span>
          </button>
          <button 
            onClick={() => onVote(activity.id, 'down')}
            className={`flex items-center transition-colors ${
              getUserVote(activity, session?.user?.id || '')?.type === 'down'
                ? 'text-red-600'
                : 'text-gray-400 hover:text-red-600'
            }`}
          >
            <ThumbsDown className="h-4 w-4" />
            <span className="text-xs ml-1">
              {getVoteCount(activity, 'down')}
            </span>
          </button>
          <button 
            onClick={() => onToggleComments(activity.id)}
            className="flex items-center text-gray-400 hover:text-blue-600 transition-colors"
          >
            <MessageSquare className="h-4 w-4" />
            <span className="text-xs ml-1">{activity.comments?.length || 0}</span>
          </button>
          
          {/* Edit/Delete buttons - only show for activity creator or admin */}
          {(activity.createdBy === session?.user?.id || isAdmin) && (
            <>
              <button 
                onClick={() => onEditActivity(activity)}
                className="flex items-center text-gray-400 hover:text-blue-600 transition-colors"
                title="Edit activity"
              >
                <Edit3 className="h-4 w-4" />
              </button>
              <button 
                onClick={() => onDeleteActivity(activity.id)}
                className="flex items-center text-gray-400 hover:text-red-600 transition-colors"
                title="Delete activity"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </>
          )}
        </div>
      </div>

      {/* Comments Section */}
      {showComments === activity.id && (
        <div className="mt-4 border-t border-gray-200 pt-4">
          <div className="space-y-3">
            {activity.comments?.map((comment) => (
              <div key={comment.id} className="flex items-start space-x-3">
                <img
                  src={comment.user.image || '/default-avatar.png'}
                  alt={comment.user.name}
                  className="h-6 w-6 rounded-full"
                />
                <div className="flex-1 min-w-0">
                  <div className="bg-gray-50 rounded-lg px-3 py-2">
                    <div className="flex items-center space-x-2 mb-1">
                      <span className="font-medium text-sm text-gray-900">
                        {comment.user.name}
                      </span>
                      <span className="text-xs text-gray-500">
                        {format(new Date(comment.createdAt), 'MMM d, h:mm a')}
                      </span>
                    </div>
                    <p className="text-sm text-gray-700">{comment.content}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Add Comment Form */}
          <div className="mt-4 flex items-start space-x-3">
            <img
              src={session?.user?.image || '/default-avatar.png'}
              alt={session?.user?.name || 'You'}
              className="h-6 w-6 rounded-full"
            />
            <div className="flex-1">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  placeholder="Add a comment..."
                  className="flex-1 text-sm border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault()
                      onAddComment(activity.id)
                    }
                  }}
                />
                <button
                  onClick={() => onAddComment(activity.id)}
                  disabled={!newComment.trim() || isSubmittingComment}
                  className="px-3 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white text-sm rounded-lg transition-colors"
                >
                  {isSubmittingComment ? '...' : 'Post'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
})

ActivityItem.displayName = 'ActivityItem'

export default function ItineraryDetail() {
  const { data: session } = useSession()
  const params = useParams()
  const router = useRouter()
  const [itinerary, setItinerary] = useState<Itinerary | null>(null)
  const [loading, setLoading] = useState(true)
  const [selectedDay, setSelectedDay] = useState<string>('')
  const [showAddActivity, setShowAddActivity] = useState(false)
  const [showAddMember, setShowAddMember] = useState(false)
  const [showMembers, setShowMembers] = useState(false)
  const [newMemberEmail, setNewMemberEmail] = useState('')
  const [isAddingMember, setIsAddingMember] = useState(false)
  const [showComments, setShowComments] = useState<string | null>(null)
  const [newComment, setNewComment] = useState('')
  const [isSubmittingComment, setIsSubmittingComment] = useState(false)
  const [showMap, setShowMap] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [editingActivity, setEditingActivity] = useState<Activity | null>(null)
  const [isUpdatingActivity, setIsUpdatingActivity] = useState(false)
  const [accommodations, setAccommodations] = useState<any[]>([])
  const [showAddAccommodation, setShowAddAccommodation] = useState(false)
  const [newAccommodation, setNewAccommodation] = useState({
    name: '',
    type: 'hotel',
    location: '',
    locationPlaceId: '',
    locationLat: null as number | null,
    locationLng: null as number | null,
    photoUrl: '',
    checkIn: '',
    nights: 1,
    guests: 1,
    amenities: [] as string[],
    notes: ''
  })
  const [newActivity, setNewActivity] = useState({
    title: '',
    description: '',
    location: '',
    locationPlaceId: '',
    locationLat: null as number | null,
    locationLng: null as number | null,
    startTime: '',
    duration: '',
    cost: '',
    isGroupActivity: true
  })

  useEffect(() => {
    if (params.id) {
      fetchItinerary(params.id as string)
      loadAccommodations(params.id as string)
    }
  }, [params.id])

  const loadAccommodations = (itineraryId: string) => {
    try {
      const savedAccommodations = localStorage.getItem(`accommodations-${itineraryId}`)
      if (savedAccommodations) {
        setAccommodations(JSON.parse(savedAccommodations))
      }
    } catch (error) {
      console.error('Error loading accommodations:', error)
    }
  }

  // Function to get accommodation status for a specific date
  const getAccommodationStatusForDate = useCallback((date: string) => {
    const relevantAccommodations = accommodations.filter(accommodation => {
      if (!accommodation.checkIn || !accommodation.nights) return false
      
      const checkInDate = new Date(accommodation.checkIn)
      const checkOutDate = new Date(checkInDate.getTime() + accommodation.nights * 24 * 60 * 60 * 1000)
      const targetDate = new Date(date)
      
      // Check if target date falls within accommodation period (inclusive of check-in, exclusive of check-out)
      return targetDate >= checkInDate && targetDate < checkOutDate
    })

    if (relevantAccommodations.length === 0) {
      return { status: 'none', totalGuests: 0, memberCount: itinerary?.members?.length || 1 }
    }

    const totalGuests = relevantAccommodations.reduce((total, accommodation) => total + (accommodation.guests || 0), 0)
    const tripMemberCount = itinerary?.members?.length || 1
    
    if (totalGuests >= tripMemberCount) {
      return { status: 'full', totalGuests, memberCount: tripMemberCount }
    } else if (totalGuests > 0) {
      return { status: 'partial', totalGuests, memberCount: tripMemberCount }
    } else {
      return { status: 'none', totalGuests: 0, memberCount: tripMemberCount }
    }
  }, [accommodations, itinerary?.members?.length])

  // Function to check if a specific date has accommodation coverage (backward compatibility)
  const hasAccommodationForDate = useCallback((date: string) => {
    const status = getAccommodationStatusForDate(date)
    return status.status === 'full'
  }, [getAccommodationStatusForDate])

  // Function to get accommodation for a specific date
  const getAccommodationForDate = useCallback((date: string) => {
    return accommodations.find(accommodation => {
      if (!accommodation.checkIn || !accommodation.nights) return false
      
      const checkInDate = new Date(accommodation.checkIn)
      const checkOutDate = new Date(checkInDate.getTime() + accommodation.nights * 24 * 60 * 60 * 1000)
      const targetDate = new Date(date)
      
      // Check if target date falls within accommodation period (inclusive of check-in, exclusive of check-out)
      return targetDate >= checkInDate && targetDate < checkOutDate
    })
  }, [accommodations])

  // Helper function to calculate time with offset (in minutes)
  const getTimeWithOffset = useCallback((time: string, offsetMinutes: number): string => {
    const date = new Date(`2000-01-01T${time}`)
    const newDate = new Date(date.getTime() + offsetMinutes * 60 * 1000)
    return newDate.toTimeString().slice(0, 5) // HH:MM format
  }, [])

  // Function to fetch place photo from Google Places API
  const fetchPlacePhoto = async (placeId: string): Promise<string | null> => {
    if (!placeId) return null
    
    try {
      const { loadGoogleMaps } = await import('../../../lib/googleMaps')
      const google = await loadGoogleMaps()
      
      if (!google) return null

      return new Promise((resolve) => {
        const service = new google.maps.places.PlacesService(document.createElement('div'))
        
        service.getDetails({
          placeId: placeId,
          fields: ['photos']
        }, (place, status) => {
          if (status === google.maps.places.PlacesServiceStatus.OK && place?.photos && place.photos.length > 0) {
            // Get the first photo URL with appropriate size
            const photoUrl = place.photos[0].getUrl({ maxWidth: 400, maxHeight: 300 })
            resolve(photoUrl)
          } else {
            resolve(null)
          }
        })
      })
    } catch (error) {
      console.error('Error fetching place photo:', error)
      return null
    }
  }

  const checkForChanges = useCallback((oldData: Itinerary, newData: Itinerary) => {
    // Check for basic property changes
    if (
      oldData.title !== newData.title ||
      oldData.description !== newData.description ||
      oldData.destination !== newData.destination ||
      oldData.startDate !== newData.startDate ||
      oldData.endDate !== newData.endDate
    ) {
      return true
    }

    // Check for member changes (more efficient than JSON.stringify)
    if (oldData.members.length !== newData.members.length) return true
    for (let i = 0; i < oldData.members.length; i++) {
      const oldMember = oldData.members[i]
      const newMember = newData.members[i]
      if (
        oldMember.user.id !== newMember.user.id ||
        oldMember.role !== newMember.role
      ) {
        return true
      }
    }

    // Check for day/activity changes
    if (oldData.days.length !== newData.days.length) return true
    for (let i = 0; i < oldData.days.length; i++) {
      const oldDay = oldData.days[i]
      const newDay = newData.days[i]
      
      if (oldDay.activities.length !== newDay.activities.length) return true
      
      for (let j = 0; j < oldDay.activities.length; j++) {
        const oldActivity = oldDay.activities[j]
        const newActivity = newDay.activities[j]
        
        if (
          oldActivity.id !== newActivity.id ||
          oldActivity.title !== newActivity.title ||
          oldActivity.description !== newActivity.description ||
          oldActivity.votes?.length !== newActivity.votes?.length ||
          oldActivity.comments?.length !== newActivity.comments?.length
        ) {
          return true
        }

        // Check for vote content changes (e.g., upvote to downvote)
        if (oldActivity.votes?.length === newActivity.votes?.length) {
          for (let k = 0; k < oldActivity.votes.length; k++) {
            const oldVote = oldActivity.votes[k]
            const newVote = newActivity.votes.find(v => v.userId === oldVote.userId)
            if (!newVote || oldVote.type !== newVote.type) {
              console.log(`[DEBUG] Vote change detected for activity ${oldActivity.title}: ${oldVote.type} → ${newVote?.type}`)
              return true
            }
          }
        }

        // Check for new votes (different users voted)
        if (oldActivity.votes?.length !== newActivity.votes?.length) {
          console.log(`[DEBUG] Vote count change for activity ${oldActivity.title}: ${oldActivity.votes?.length} → ${newActivity.votes?.length}`)
        }
      }
    }

    return false
  }, [])

  const updateItineraryWithDelta = useCallback((oldData: Itinerary, newData: Itinerary) => {
    // Only update if there are actual changes to prevent unnecessary re-renders
    setItinerary(newData) // Simplified - just update with new data since we already checked for changes
  }, [])

  const fetchItinerary = useCallback(async (id: string, isBackgroundUpdate = false) => {
    try {
      // Only show loading on initial load, not on refreshes
      if (!itinerary) {
        setLoading(true)
      } else if (!isBackgroundUpdate) {
        setIsRefreshing(true)
      }

      const response = await fetch(`/api/itineraries/${id}`)
      if (response.ok) {
        const newData = await response.json()
        
        // If this is a background update, only update if there are actual changes
        if (isBackgroundUpdate && itinerary) {
          const hasChanges = checkForChanges(itinerary, newData)
          console.log('[DEBUG] Background update - hasChanges:', hasChanges)
          if (hasChanges) {
            console.log('[DEBUG] Updating itinerary with changes')
            updateItineraryWithDelta(itinerary, newData)
          } else {
            console.log('[DEBUG] No changes detected, skipping update')
          }
        } else {
          console.log('[DEBUG] Initial load, setting itinerary')
          setItinerary(newData)
          if (newData.days.length > 0 && !selectedDay) {
            setSelectedDay(newData.days[0].id)
          }
        }
      } else {
        throw new Error('Failed to fetch itinerary')
      }
    } catch (error) {
      console.error('Error fetching itinerary:', error)
      if (!itinerary) {
        router.push('/')
      }
    } finally {
      setLoading(false)
      setIsRefreshing(false)
    }
  }, [itinerary, selectedDay, router])

  // Polling effect to refresh data every 5 seconds
  useEffect(() => {
    if (!params.id || !session) return

    const interval = setInterval(() => {
      // Only poll if user is not actively interacting with the page and tab is visible
      if (!showAddActivity && !showAddMember && !isSubmittingComment && !document.hidden) {
        fetchItinerary(params.id as string, true) // true = background update
      }
    }, 5000) // Poll every 5 seconds

    return () => clearInterval(interval)
  }, [params.id, session, showAddActivity, showAddMember, isSubmittingComment, fetchItinerary])

  const handleAddActivity = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!selectedDay || !session?.user?.id) return

    try {
      const response = await fetch('/api/activities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...newActivity,
          dayId: selectedDay,
          cost: newActivity.cost ? parseFloat(newActivity.cost) : null,
          duration: newActivity.duration ? parseInt(newActivity.duration) : null,
          locationPlaceId: newActivity.locationPlaceId || null,
          locationLat: newActivity.locationLat,
          locationLng: newActivity.locationLng,
        }),
      })

      if (response.ok) {
        setNewActivity({
          title: '',
          description: '',
          location: '',
          locationPlaceId: '',
          locationLat: null,
          locationLng: null,
          startTime: '',
          duration: '',
          cost: '',
          isGroupActivity: true
        })
        setShowAddActivity(false)
        await fetchItinerary(params.id as string, true) // Background update after activity creation
      } else {
        throw new Error('Failed to add activity')
      }
    } catch (error) {
      console.error('Error adding activity:', error)
      alert('Failed to add activity. Please try again.')
    }
  }

  const handleAddMember = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newMemberEmail.trim() || !session?.user?.id) return

    setIsAddingMember(true)
    try {
      const response = await fetch(`/api/itineraries/${params.id}/members`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: newMemberEmail.trim(),
          role: 'member',
        }),
      })

      if (response.ok) {
        setNewMemberEmail('')
        setShowAddMember(false)
        await fetchItinerary(params.id as string, true) // Background update after member addition
      } else {
        const error = await response.json()
        alert(error.error || 'Failed to add member. Please try again.')
      }
    } catch (error) {
      console.error('Error adding member:', error)
      alert('Failed to add member. Please try again.')
    } finally {
      setIsAddingMember(false)
    }
  }

  const handleRemoveMember = async (userId: string) => {
    if (!confirm('Are you sure you want to remove this member?')) return

    try {
      const response = await fetch(`/api/itineraries/${params.id}/members?userId=${userId}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        await fetchItinerary(params.id as string, true) // Background update after member removal
      } else {
        const error = await response.json()
        alert(error.error || 'Failed to remove member. Please try again.')
      }
    } catch (error) {
      console.error('Error removing member:', error)
      alert('Failed to remove member. Please try again.')
    }
  }

  const handleVote = useCallback(async (activityId: string, type: 'up' | 'down') => {
    if (!session?.user?.id || !itinerary) return

    // Optimistic update - immediately update the UI before server response
    setItinerary(prevItinerary => {
      if (!prevItinerary) return prevItinerary
      
      return {
        ...prevItinerary,
        days: prevItinerary.days.map(day => ({
          ...day,
          activities: day.activities.map(activity => {
            if (activity.id !== activityId) return activity
            
            // Find existing vote from current user
            const existingVoteIndex = activity.votes.findIndex(v => v.userId === session.user.id)
            let newVotes = [...activity.votes]
            
            if (existingVoteIndex >= 0) {
              // Update existing vote
              newVotes[existingVoteIndex] = {
                ...newVotes[existingVoteIndex],
                type
              }
            } else {
              // Add new vote
              newVotes.push({
                id: `temp-${Date.now()}`, // Temporary ID
                userId: session.user.id,
                type,
                createdAt: new Date().toISOString()
              })
            }
            
            return {
              ...activity,
              votes: newVotes
            }
          })
        }))
      }
    })

    try {
      const response = await fetch('/api/votes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          activityId,
          type,
        }),
      })

      if (!response.ok) {
        // Revert optimistic update on error
        await fetchItinerary(params.id as string, true)
        const error = await response.json()
        console.error('Error voting:', error)
      }
      // Don't fetch on success - the optimistic update is already applied
    } catch (error) {
      // Revert optimistic update on error
      await fetchItinerary(params.id as string, true)
      console.error('Error voting:', error)
    }
  }, [session?.user?.id, params.id, itinerary])

  const handleAddComment = useCallback(async (activityId: string) => {
    if (!newComment.trim() || !session?.user?.id || !itinerary) return

    const commentContent = newComment.trim()
    setIsSubmittingComment(true)
    setNewComment('') // Clear input immediately

    // Optimistic update - immediately add comment to UI
    const tempComment = {
      id: `temp-${Date.now()}`,
      content: commentContent,
      userId: session.user.id,
      user: {
        id: session.user.id,
        name: session.user.name || 'You',
        image: session.user.image || null
      },
      createdAt: new Date().toISOString()
    }

    setItinerary(prevItinerary => {
      if (!prevItinerary) return prevItinerary
      
      return {
        ...prevItinerary,
        days: prevItinerary.days.map(day => ({
          ...day,
          activities: day.activities.map(activity => {
            if (activity.id !== activityId) return activity
            
            return {
              ...activity,
              comments: [...activity.comments, tempComment]
            }
          })
        }))
      }
    })

    try {
      const response = await fetch('/api/comments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          activityId,
          content: commentContent,
        }),
      })

      if (!response.ok) {
        // Revert optimistic update and restore comment text on error
        setNewComment(commentContent)
        await fetchItinerary(params.id as string, true)
        const error = await response.json()
        alert(error.error || 'Failed to add comment. Please try again.')
      }
      // Don't fetch on success - the optimistic update is already applied
    } catch (error) {
      // Revert optimistic update and restore comment text on error
      setNewComment(commentContent)
      await fetchItinerary(params.id as string, true)
      console.error('Error adding comment:', error)
      alert('Failed to add comment. Please try again.')
    } finally {
      setIsSubmittingComment(false)
    }
  }, [newComment, session?.user?.id, params.id, itinerary])

  const handleToggleComments = useCallback((activityId: string) => {
    setShowComments(showComments === activityId ? null : activityId)
  }, [showComments])

  const handleEditActivity = useCallback((activity: Activity) => {
    setEditingActivity(activity)
  }, [])

  const handleUpdateActivity = useCallback(async (e: React.FormEvent) => {
    e.preventDefault()
    if (!editingActivity || !session?.user?.id || !itinerary) return

    setIsUpdatingActivity(true)

    // Optimistic update
    const updatedActivity = {
      ...editingActivity,
      updatedAt: new Date().toISOString()
    }

    setItinerary(prevItinerary => {
      if (!prevItinerary) return prevItinerary
      
      return {
        ...prevItinerary,
        days: prevItinerary.days.map(day => ({
          ...day,
          activities: day.activities.map(activity => 
            activity.id === editingActivity.id ? updatedActivity : activity
          )
        }))
      }
    })

    try {
      const response = await fetch(`/api/activities/${editingActivity.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: editingActivity.title,
          description: editingActivity.description,
          location: editingActivity.location,
          locationPlaceId: editingActivity.locationPlaceId || null,
          locationLat: editingActivity.locationLat,
          locationLng: editingActivity.locationLng,
          startTime: editingActivity.startTime,
          duration: editingActivity.duration,
          cost: editingActivity.cost,
          isGroupActivity: editingActivity.isGroupActivity,
        }),
      })

      if (response.ok) {
        setEditingActivity(null)
        // Don't fetch - optimistic update is already applied
      } else {
        // Revert optimistic update on error
        await fetchItinerary(params.id as string, true)
        const error = await response.json()
        alert(error.error || 'Failed to update activity. Please try again.')
      }
    } catch (error) {
      // Revert optimistic update on error
      await fetchItinerary(params.id as string, true)
      console.error('Error updating activity:', error)
      alert('Failed to update activity. Please try again.')
    } finally {
      setIsUpdatingActivity(false)
    }
  }, [editingActivity, session?.user?.id, params.id, itinerary])

  const handleDeleteActivity = useCallback(async (activityId: string) => {
    if (!confirm('Are you sure you want to delete this activity?')) return
    if (!session?.user?.id || !itinerary) return

    // Optimistic update - remove activity immediately
    setItinerary(prevItinerary => {
      if (!prevItinerary) return prevItinerary
      
      return {
        ...prevItinerary,
        days: prevItinerary.days.map(day => ({
          ...day,
          activities: day.activities.filter(activity => activity.id !== activityId)
        }))
      }
    })

    try {
      const response = await fetch(`/api/activities/${activityId}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        // Revert optimistic update on error
        await fetchItinerary(params.id as string, true)
        const error = await response.json()
        alert(error.error || 'Failed to delete activity. Please try again.')
      }
      // Don't fetch on success - optimistic update is already applied
    } catch (error) {
      // Revert optimistic update on error
      await fetchItinerary(params.id as string, true)
      console.error('Error deleting activity:', error)
      alert('Failed to delete activity. Please try again.')
    }
  }, [session?.user?.id, params.id, itinerary])

  // Accommodation handlers
  const handleAddAccommodation = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newAccommodation.name.trim() || !newAccommodation.location.trim()) {
      alert('Please enter accommodation name and location')
      return
    }

    try {
      const accommodation = {
        ...newAccommodation,
        id: Date.now().toString() // Simple ID generation
      }

      // Save to localStorage (same logic as AccommodationPlanner)
      const savedAccommodations = localStorage.getItem(`accommodations-${params.id}`)
      const existingAccommodations = savedAccommodations ? JSON.parse(savedAccommodations) : []
      const updatedAccommodations = [...existingAccommodations, accommodation]
      
      localStorage.setItem(`accommodations-${params.id}`, JSON.stringify(updatedAccommodations))
      
      // Reset form
      const memberCount = itinerary?.members?.length || 1
      setNewAccommodation({
        name: '',
        type: 'hotel',
        location: '',
        locationPlaceId: '',
        locationLat: null,
        locationLng: null,
        photoUrl: '',
        checkIn: '',
        nights: 1,
        guests: memberCount,
        amenities: [],
        notes: ''
      })
      
      setShowAddAccommodation(false)
      
      // Refresh accommodations
      loadAccommodations(params.id as string)
    } catch (error) {
      console.error('Error adding accommodation:', error)
      alert('Failed to add accommodation. Please try again.')
    }
  }

  const toggleAmenity = (amenity: string) => {
    const updatedAmenities = newAccommodation.amenities.includes(amenity)
      ? newAccommodation.amenities.filter(a => a !== amenity)
      : [...newAccommodation.amenities, amenity]
    
    setNewAccommodation(prev => ({
      ...prev,
      amenities: updatedAmenities
    }))
  }

  const isAdmin = useMemo(() => {
    if (!itinerary || !session?.user?.id) return false
    return itinerary.members.some(
      member => member.user.id === session.user.id && member.role === 'admin'
    ) || itinerary.createdBy === session.user.id
  }, [itinerary?.members, itinerary?.createdBy, session?.user?.id])

  const selectedDayData = useMemo(() => {
    return itinerary?.days.find(day => day.id === selectedDay)
  }, [itinerary?.days, selectedDay])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading itinerary...</p>
        </div>
      </div>
    )
  }

  if (!itinerary || !session) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 mb-4">Itinerary not found or access denied</p>
          <Link href="/" className="text-blue-600 hover:underline">
            Go back to home
          </Link>
        </div>
      </div>
    )
  }


  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <Link
                href="/"
                className="flex items-center text-gray-600 hover:text-gray-900 mr-4"
              >
                <ArrowLeft className="h-5 w-5 mr-1" />
                Back
              </Link>
              <div>
                <div className="flex items-center">
                  <h1 className="text-2xl font-bold text-gray-900">{itinerary.title}</h1>
                  <div className="ml-2 flex items-center text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                    <div className="w-2 h-2 bg-green-600 rounded-full mr-1 animate-pulse"></div>
                    Live
                  </div>
                </div>
                <div className="flex items-center text-sm text-gray-600 mt-1">
                  <MapPin className="h-4 w-4 mr-1" />
                  {itinerary.destination}
                  <span className="mx-2">•</span>
                  <Calendar className="h-4 w-4 mr-1" />
                  {format(new Date(itinerary.startDate), 'MMM d')} - {format(new Date(itinerary.endDate), 'MMM d, yyyy')}
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowMembers(!showMembers)}
                className="flex items-center text-sm text-gray-600 hover:text-gray-900 transition-colors"
              >
                <Users className="h-4 w-4 mr-1" />
                {itinerary.members.length} member{itinerary.members.length !== 1 ? 's' : ''}
              </button>
              {isRefreshing && (
                <div className="flex items-center text-xs text-gray-500">
                  <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                  Syncing...
                </div>
              )}
              {isAdmin && (
                <button
                  onClick={() => setShowAddMember(true)}
                  className="flex items-center px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-sm rounded-lg transition-colors"
                >
                  <UserPlus className="h-4 w-4 mr-1" />
                  Add Member
                </button>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Layout - Responsive Split Screen */}
      <div className="flex flex-col lg:flex-row" style={{ minHeight: 'calc(100vh - 80px)' }}>
        {/* Left Side - Content */}
        <div className="w-full lg:w-[45%] overflow-y-auto">
          <div className="p-6">
            {/* Accommodation Planner */}
            <AccommodationPlanner 
              itineraryId={itinerary.id} 
              className="mb-6" 
              onAccommodationsChange={() => loadAccommodations(itinerary.id)}
              itineraryDays={itinerary.days}
              memberCount={itinerary.members?.length || 1}
              onAddAccommodation={() => {
                const memberCount = itinerary?.members?.length || 1
                setNewAccommodation(prev => ({
                  ...prev,
                  guests: memberCount,
                  checkIn: '' // Will be set by the component
                }))
                setShowAddAccommodation(true)
              }}
            />

            {/* Members Panel */}
            {showMembers && (
              <div className="mb-6 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">Trip Members</h3>
                  <button
                    onClick={() => setShowMembers(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <X className="h-5 w-5" />
                  </button>
                </div>
                
                <div className="space-y-3">
                  {itinerary.members.map((member) => (
                    <div key={member.user.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <img
                          src={member.user.image || '/default-avatar.png'}
                          alt={member.user.name || 'User'}
                          className="h-8 w-8 rounded-full"
                        />
                        <div>
                          <div className="flex items-center space-x-2">
                            <span className="font-medium text-gray-900">{member.user.name}</span>
                            {member.role === 'admin' && (
                              <Crown className="h-4 w-4 text-yellow-500" title="Admin" />
                            )}
                            {itinerary.createdBy === member.user.id && (
                              <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                                Creator
                              </span>
                            )}
                          </div>
                          <p className="text-sm text-gray-600">{member.user.email}</p>
                        </div>
                      </div>
                      
                      {isAdmin && member.user.id !== session?.user?.id && itinerary.createdBy !== member.user.id && (
                        <button
                          onClick={() => handleRemoveMember(member.user.id)}
                          className="text-red-600 hover:text-red-800 transition-colors"
                          title="Remove member"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Days and Activities */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {/* Days Sidebar */}
              <div className="md:col-span-1">
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                  <h3 className="font-semibold text-gray-900 mb-4">Days</h3>
              <div className="space-y-2">
                {itinerary.days.map((day, index) => {
                  const accommodationStatus = getAccommodationStatusForDate(day.date)
                  return (
                    <button
                      key={day.id}
                      onClick={() => setSelectedDay(day.id)}
                      className={`w-full text-left p-3 rounded-lg transition-colors relative ${
                        selectedDay === day.id
                          ? 'bg-blue-100 text-blue-900 border border-blue-200'
                          : 'hover:bg-gray-50 border border-transparent'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="font-medium">Day {index + 1}</div>
                        <div className="flex items-center gap-1">
                          {accommodationStatus.status === 'full' ? (
                            <Hotel 
                              className="h-3 w-3 text-green-600" 
                              title="Full accommodation coverage"
                            />
                          ) : accommodationStatus.status === 'partial' ? (
                            <AlertTriangle 
                              className="h-3 w-3 text-orange-500" 
                              title={`Partial accommodation: ${accommodationStatus.totalGuests}/${accommodationStatus.memberCount} guests covered`}
                            />
                          ) : (
                            <AlertCircle 
                              className="h-3 w-3 text-amber-500" 
                              title="No accommodation set"
                            />
                          )}
                        </div>
                      </div>
                      <div className="text-sm text-gray-600">
                        {format(new Date(day.date), 'MMM d, yyyy')}
                      </div>
                      <div className="flex items-center justify-between mt-1">
                        <div className="text-xs text-gray-500">
                          {day.activities.length} activit{day.activities.length !== 1 ? 'ies' : 'y'}
                        </div>
                        <div className="text-xs">
                          {accommodationStatus.status === 'full' ? (
                            <span className="text-green-600 font-medium">Booked</span>
                          ) : accommodationStatus.status === 'partial' ? (
                            <span className="text-orange-600 font-medium">
                              {accommodationStatus.totalGuests}/{accommodationStatus.memberCount}
                            </span>
                          ) : (
                            <span className="text-amber-600 font-medium">No stay</span>
                          )}
                        </div>
                      </div>
                    </button>
                  )
                })}
              </div>
            </div>
          </div>

              {/* Activities */}
              <div className="md:col-span-3">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">
                    {selectedDayData && `Day ${itinerary.days.findIndex(d => d.id === selectedDay) + 1} Activities`}
                  </h3>
                  <p className="text-sm text-gray-600">
                    {selectedDayData && format(new Date(selectedDayData.date), 'EEEE, MMMM d, yyyy')}
                  </p>
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => setShowMap(true)}
                    className="lg:hidden flex items-center px-3 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    <Map className="h-4 w-4 mr-2" />
                    Show on Map
                  </button>
                  <button
                    onClick={() => setShowAddActivity(true)}
                    className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Activity
                  </button>
                </div>
              </div>

              {selectedDayData?.activities.length === 0 ? (
                <div className="text-center py-8">
                  <Calendar className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500 mb-4">No activities planned for this day</p>
                  <button
                    onClick={() => setShowAddActivity(true)}
                    className="text-blue-600 hover:underline"
                  >
                    Add the first activity
                  </button>
                </div>
              ) : (
                <div className="space-y-4">
                  {selectedDayData?.activities.map((activity, index) => {
                    const accommodation = getAccommodationForDate(selectedDayData.date)
                    const isFirstActivity = index === 0
                    const isLastActivity = index === selectedDayData.activities.length - 1
                    
                    return (
                    <div key={activity.id}>
                      {/* Accommodation to First Activity Commute */}
                      {isFirstActivity && accommodation && activity.startTime && (
                        <TimeGap
                          startTime={getTimeWithOffset(activity.startTime, -30)} // 30 min before first activity
                          endTime={activity.startTime}
                          fromLocation={accommodation.location}
                          toLocation={activity.location}
                          isAccommodationCommute={true}
                          commuteType="start"
                          onAddActivity={() => {
                            setShowAddActivity(true)
                            const suggestedStartTime = getTimeWithOffset(activity.startTime, -60) // 1 hour before
                            setNewActivity(prev => ({
                              ...prev,
                              startTime: suggestedStartTime,
                              duration: '30' // 30 minute default duration
                            }))
                          }}
                        />
                      )}
                      
                      <ActivityItem
                        activity={activity}
                        session={session}
                        onVote={handleVote}
                        onToggleComments={handleToggleComments}
                        onAddComment={handleAddComment}
                        onEditActivity={handleEditActivity}
                        onDeleteActivity={handleDeleteActivity}
                        showComments={showComments}
                        newComment={newComment}
                        setNewComment={setNewComment}
                        isSubmittingComment={isSubmittingComment}
                        isAdmin={isAdmin}
                      />
                      
                      {/* Show TimeGap between activities */}
                      {index < selectedDayData.activities.length - 1 && (
                        <TimeGap
                          startTime={getEndTime(activity.startTime, activity.duration) || undefined}
                          endTime={selectedDayData.activities[index + 1].startTime || undefined}
                          fromLocation={activity.location || undefined}
                          toLocation={selectedDayData.activities[index + 1].location || undefined}
                          onAddActivity={() => {
                            setShowAddActivity(true)
                            // Set suggested times based on the gap
                            const activityEndTime = getEndTime(activity.startTime, activity.duration)
                            const nextActivityStartTime = selectedDayData.activities[index + 1].startTime
                            
                            if (activityEndTime && nextActivityStartTime) {
                              // Calculate suggested duration for the gap
                              const start = new Date(`2000-01-01T${activityEndTime}`)
                              const end = new Date(`2000-01-01T${nextActivityStartTime}`)
                              if (end < start) end.setDate(end.getDate() + 1)
                              const gapMinutes = Math.floor((end.getTime() - start.getTime()) / (1000 * 60))
                              
                              setNewActivity(prev => ({
                                ...prev,
                                startTime: activityEndTime,
                                duration: Math.max(30, Math.floor(gapMinutes / 2)).toString() // Suggest half the gap time, min 30 minutes
                              }))
                            }
                          }}
                        />
                      )}
                      
                      {/* Last Activity to Accommodation Commute */}
                      {isLastActivity && accommodation && activity.startTime && activity.duration && (
                        <TimeGap
                          startTime={getEndTime(activity.startTime, activity.duration)}
                          endTime={getTimeWithOffset(getEndTime(activity.startTime, activity.duration) || activity.startTime, 30)} // 30 min after last activity
                          fromLocation={activity.location}
                          toLocation={accommodation.location}
                          isAccommodationCommute={true}
                          commuteType="end"
                          onAddActivity={() => {
                            setShowAddActivity(true)
                            const activityEndTime = getEndTime(activity.startTime, activity.duration)
                            if (activityEndTime) {
                              setNewActivity(prev => ({
                                ...prev,
                                startTime: activityEndTime,
                                duration: '30' // 30 minute default duration
                              }))
                            }
                          }}
                        />
                      )}
                    </div>
                    )
                  })}
                </div>
              )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Right Side - Map */}
      <div className="w-full lg:w-[55%] bg-white lg:border-l border-gray-200" style={{ height: 'calc(100vh - 80px)' }}>
        <div className="h-full flex flex-col">
          <div className="p-4 border-b border-gray-200 bg-white">
            <h3 className="text-lg font-semibold text-gray-900">Activities Map</h3>
            <p className="text-sm text-gray-600">
              {selectedDayData ? `Day ${itinerary.days.findIndex(d => d.id === selectedDay) + 1}` : 'Select a day to view activities'}
            </p>
          </div>
          <div className="flex-1">
            {selectedDayData && selectedDayData.activities.length > 0 ? (
              <ActivitiesMap
                activities={selectedDayData.activities}
                selectedDay={selectedDay}
                className="h-full"
              />
            ) : (
              <div className="h-full flex items-center justify-center bg-gray-50">
                <div className="text-center">
                  <MapPin className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">
                    {selectedDayData ? 'No activities with location data for this day' : 'Select a day to view activities on map'}
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Mobile Layout - Original Layout */}
      <div className="hidden">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Accommodation Planner */}
        <AccommodationPlanner 
          itineraryId={itinerary.id} 
          className="mb-6" 
          onAccommodationsChange={() => loadAccommodations(itinerary.id)}
          itineraryDays={itinerary.days}
          memberCount={itinerary.members?.length || 1}
          onAddAccommodation={() => {
            const memberCount = itinerary?.members?.length || 1
            setNewAccommodation(prev => ({
              ...prev,
              guests: memberCount,
              checkIn: ''
            }))
            setShowAddAccommodation(true)
          }}
        />

        {/* Members Panel */}
        {showMembers && (
          <div className="mb-6 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Trip Members</h3>
              <button
                onClick={() => setShowMembers(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="space-y-3">
              {itinerary.members?.map((member) => (
                <div key={member.id} className="flex items-center justify-between">
                  <div className="flex items-center">
                    <img
                      src={member.user.image || '/default-avatar.png'}
                      alt={member.user.name || 'User'}
                      className="w-8 h-8 rounded-full mr-3"
                    />
                    <div>
                      <p className="font-medium text-gray-900">{member.user.name}</p>
                      <p className="text-sm text-gray-500">{member.user.email}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {member.role === 'admin' && (
                      <Crown className="h-4 w-4 text-yellow-500" title="Admin" />
                    )}
                    {isAdmin && member.userId !== session?.user?.id && (
                      <button
                        onClick={() => handleRemoveMember(member.userId)}
                        className="text-red-600 hover:text-red-800 transition-colors"
                        title="Remove member"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Days and Activities for Mobile */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                {selectedDayData && `Day ${itinerary.days.findIndex(d => d.id === selectedDay) + 1} Activities`}
              </h3>
              <p className="text-sm text-gray-600">
                {selectedDayData && format(new Date(selectedDayData.date), 'EEEE, MMMM d, yyyy')}
              </p>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={() => setShowMap(true)}
                className="flex items-center px-3 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <Map className="h-4 w-4 mr-2" />
                Show on Map
              </button>
              <button
                onClick={() => setShowAddActivity(true)}
                className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Activity
              </button>
            </div>
          </div>

          {/* Days Selection for Mobile */}
          <div className="mb-6">
            <div className="flex flex-wrap gap-2">
              {itinerary.days.map((day, index) => (
                <button
                  key={day.id}
                  onClick={() => setSelectedDay(day.id)}
                  className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    selectedDay === day.id
                      ? 'bg-blue-100 text-blue-900 border border-blue-200'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  Day {index + 1}
                </button>
              ))}
            </div>
          </div>

          {/* Activities List for Mobile */}
          {selectedDayData?.activities.length === 0 ? (
            <div className="text-center py-8">
              <Calendar className="h-12 w-12 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500 mb-4">No activities planned for this day</p>
              <button
                onClick={() => setShowAddActivity(true)}
                className="text-blue-600 hover:underline"
              >
                Add the first activity
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              {selectedDayData?.activities.map((activity, index) => (
                <ActivityItem
                  key={activity.id}
                  activity={activity}
                  session={session}
                  onVote={handleVote}
                  onEditActivity={setEditingActivity}
                  onDeleteActivity={handleDeleteActivity}
                  onToggleComments={handleToggleComments}
                  showComments={showComments === activity.id}
                  newComment={newComment}
                  setNewComment={setNewComment}
                  onAddComment={handleAddComment}
                  isSubmittingComment={isSubmittingComment}
                  isAdmin={isAdmin}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>

      {/* Add Activity Modal */}
      {showAddActivity && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-8 p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Add Activity</h3>
            <form onSubmit={handleAddActivity} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Activity Title *
                </label>
                <input
                  type="text"
                  value={newActivity.title}
                  onChange={(e) => setNewActivity(prev => ({ ...prev, title: e.target.value }))}
                  required
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Visit Eiffel Tower"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  value={newActivity.description}
                  onChange={(e) => setNewActivity(prev => ({ ...prev, description: e.target.value }))}
                  rows={3}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Activity details..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Location
                </label>
                <LocationSearch
                  value={newActivity.location}
                  onChange={(location, placeData) => {
                    setNewActivity(prev => ({
                      ...prev,
                      location,
                      locationPlaceId: placeData?.place_id || '',
                      locationLat: placeData?.geometry.location.lat || null,
                      locationLng: placeData?.geometry.location.lng || null,
                    }))
                  }}
                  placeholder="Search for a location..."
                  className="w-full"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Start Time
                  </label>
                  <input
                    type="time"
                    value={newActivity.startTime}
                    onChange={(e) => setNewActivity(prev => ({ ...prev, startTime: e.target.value }))}
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Duration (minutes)
                  </label>
                  <input
                    type="number"
                    min="1"
                    placeholder="e.g. 60"
                    value={newActivity.duration}
                    onChange={(e) => setNewActivity(prev => ({ ...prev, duration: e.target.value }))}
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Estimated Cost ($)
                </label>
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={newActivity.cost}
                  onChange={(e) => setNewActivity(prev => ({ ...prev, cost: e.target.value }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="0.00"
                />
              </div>

              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="isGroupActivity"
                  checked={newActivity.isGroupActivity}
                  onChange={(e) => setNewActivity(prev => ({ ...prev, isGroupActivity: e.target.checked }))}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="isGroupActivity" className="ml-2 text-sm text-gray-700">
                  Group activity (everyone participates)
                </label>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowAddActivity(false)}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                >
                  Add Activity
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add Member Modal */}
      {showAddMember && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-8 p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Add Member to Trip</h3>
              <button
                onClick={() => setShowAddMember(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <form onSubmit={handleAddMember} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email Address *
                </label>
                <input
                  type="email"
                  value={newMemberEmail}
                  onChange={(e) => setNewMemberEmail(e.target.value)}
                  required
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter their email address"
                />
                <p className="text-xs text-gray-500 mt-1">
                  They must have a Google account to join the trip
                </p>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowAddMember(false)}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={isAddingMember}
                  className="px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-green-300 text-white rounded-lg transition-colors"
                >
                  {isAddingMember ? 'Adding...' : 'Add Member'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Edit Activity Modal */}
      {editingActivity && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-8 p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Edit Activity</h3>
            <form onSubmit={handleUpdateActivity} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Activity Title *
                </label>
                <input
                  type="text"
                  value={editingActivity.title}
                  onChange={(e) => setEditingActivity(prev => prev ? { ...prev, title: e.target.value } : null)}
                  required
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Visit Eiffel Tower"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  value={editingActivity.description || ''}
                  onChange={(e) => setEditingActivity(prev => prev ? { ...prev, description: e.target.value } : null)}
                  rows={3}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Activity details..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Location
                </label>
                <LocationSearch
                  value={editingActivity.location || ''}
                  onChange={(location, placeData) => {
                    setEditingActivity(prev => prev ? {
                      ...prev,
                      location,
                      locationPlaceId: placeData?.place_id || prev.locationPlaceId || '',
                      locationLat: placeData?.geometry.location.lat || prev.locationLat || null,
                      locationLng: placeData?.geometry.location.lng || prev.locationLng || null,
                    } : null)
                  }}
                  placeholder="Search for a location..."
                  className="w-full"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Start Time
                  </label>
                  <input
                    type="time"
                    value={editingActivity.startTime || ''}
                    onChange={(e) => setEditingActivity(prev => prev ? { ...prev, startTime: e.target.value } : null)}
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Duration (minutes)
                  </label>
                  <input
                    type="number"
                    min="1"
                    placeholder="e.g. 60"
                    value={editingActivity.duration || ''}
                    onChange={(e) => setEditingActivity(prev => prev ? { ...prev, duration: parseInt(e.target.value) || undefined } : null)}
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Estimated Cost ($)
                </label>
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={editingActivity.cost || ''}
                  onChange={(e) => setEditingActivity(prev => prev ? { ...prev, cost: e.target.value ? parseFloat(e.target.value) : undefined } : null)}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="0.00"
                />
              </div>

              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="editIsGroupActivity"
                  checked={editingActivity.isGroupActivity}
                  onChange={(e) => setEditingActivity(prev => prev ? { ...prev, isGroupActivity: e.target.checked } : null)}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="editIsGroupActivity" className="ml-2 text-sm text-gray-700">
                  Group activity (everyone participates)
                </label>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  type="button"
                  onClick={() => setEditingActivity(null)}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={isUpdatingActivity}
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white rounded-lg transition-colors"
                >
                  {isUpdatingActivity ? 'Updating...' : 'Update Activity'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add Accommodation Modal */}
      {showAddAccommodation && (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-60 flex items-start justify-center pt-8 p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[85vh] overflow-y-auto">
            <div className="sticky top-0 bg-white px-6 py-4 border-b border-gray-200 rounded-t-lg">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">Add Accommodation</h3>
                <button
                  onClick={() => setShowAddAccommodation(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>
            </div>
            
            <div className="px-6 py-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Location *</label>
                  <LocationSearch
                    value={newAccommodation.location}
                    onChange={async (location, placeData) => {
                      const placeId = placeData?.place_id || ''
                      let photoUrl = ''

                      // Fetch photo if we have a place ID
                      if (placeId) {
                        const photo = await fetchPlacePhoto(placeId)
                        photoUrl = photo || ''
                      }

                      // Auto-populate name from place name if name is empty
                      const placeName = placeData?.name || ''

                      setNewAccommodation(prev => ({
                        ...prev,
                        location,
                        locationPlaceId: placeId,
                        locationLat: placeData?.geometry.location.lat || null,
                        locationLng: placeData?.geometry.location.lng || null,
                        photoUrl: photoUrl,
                        // Only populate name if it's currently empty
                        name: prev.name.trim() === '' ? placeName : prev.name,
                      }))
                    }}
                    placeholder="Search for accommodation location..."
                    className="w-full"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Name *</label>
                  <input
                    type="text"
                    value={newAccommodation.name}
                    onChange={(e) => setNewAccommodation(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="Hotel California"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
                  <select
                    value={newAccommodation.type}
                    onChange={(e) => setNewAccommodation(prev => ({ ...prev, type: e.target.value as any }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                  >
                    <option value="hotel">Hotel</option>
                    <option value="hostel">Hostel</option>
                    <option value="apartment">Apartment</option>
                    <option value="bnb">B&B / Airbnb</option>
                    <option value="resort">Resort</option>
                    <option value="other">Other</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Guests</label>
                  <input
                    type="number"
                    min="1"
                    value={newAccommodation.guests}
                    onChange={(e) => setNewAccommodation(prev => ({ ...prev, guests: parseInt(e.target.value) || 1 }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Check-in</label>
                  <input
                    type="date"
                    value={newAccommodation.checkIn}
                    onChange={(e) => setNewAccommodation(prev => ({ ...prev, checkIn: e.target.value }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Nights</label>
                  <select
                    value={newAccommodation.nights}
                    onChange={(e) => setNewAccommodation(prev => ({ ...prev, nights: parseInt(e.target.value) }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                  >
                    {Array.from({ length: 30 }, (_, i) => i + 1).map(nights => (
                      <option key={nights} value={nights}>
                        {nights} night{nights !== 1 ? 's' : ''}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">Amenities</label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {[
                    { value: 'wifi', label: 'WiFi' },
                    { value: 'parking', label: 'Parking' },
                    { value: 'breakfast', label: 'Breakfast' },
                    { value: 'restaurant', label: 'Restaurant' },
                    { value: 'pool', label: 'Pool' },
                    { value: 'gym', label: 'Gym' },
                    { value: 'spa', label: 'Spa' },
                    { value: 'laundry', label: 'Laundry' }
                  ].map(amenity => (
                    <label key={amenity.value} className="flex items-center gap-2 text-sm">
                      <input
                        type="checkbox"
                        checked={newAccommodation.amenities.includes(amenity.value)}
                        onChange={() => {
                          const updatedAmenities = newAccommodation.amenities.includes(amenity.value)
                            ? newAccommodation.amenities.filter(a => a !== amenity.value)
                            : [...newAccommodation.amenities, amenity.value]
                          
                          setNewAccommodation(prev => ({
                            ...prev,
                            amenities: updatedAmenities
                          }))
                        }}
                        className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                      />
                      <span>{amenity.label}</span>
                    </label>
                  ))}
                </div>
              </div>

              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                <textarea
                  value={newAccommodation.notes || ''}
                  onChange={(e) => setNewAccommodation(prev => ({ ...prev, notes: e.target.value }))}
                  placeholder="Special requests, booking reference, etc."
                  rows={2}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>
            </div>

            <div className="sticky bottom-0 bg-white px-6 py-4 border-t border-gray-200 rounded-b-lg">
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => {
                    setNewAccommodation({
                      name: '',
                      type: 'hotel',
                      location: '',
                      locationPlaceId: '',
                      locationLat: null,
                      locationLng: null,
                      photoUrl: '',
                      checkIn: '',
                      nights: 1,
                      guests: 1,
                      amenities: [],
                      notes: ''
                    })
                    setShowAddAccommodation(false)
                  }}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddAccommodation}
                  className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
                >
                  Add Accommodation
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Mobile Map Modal */}
      {showMap && selectedDayData && (
        <ActivitiesMap
          activities={selectedDayData.activities}
          selectedDay={selectedDay}
          onClose={() => setShowMap(false)}
          isModal={true}
        />
      )}
    </div>
  )
}